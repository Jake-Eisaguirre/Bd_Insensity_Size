---
title: "Variation in Bd Intensity Through Size of Adult Amphibians"
format: html
editor: source
---

[Guiding Question]{.underline}: How does size (weight, length, and/or a mass scalar) affect Bd infection intensity in adult amphibians.

[Hypothesis]{.underline}: We expect that as amphibians increase in size we would see a decrease in Bd infection intensity due to more developed and robust immune system.

### Load Packages

```{r}

if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

librarian::shelf(tidyverse, here, DBI, RPostgres)

```

### Connect to Database

```{r}
tryCatch({
    drv <- dbDriver("Postgres")
    print("Connecting to Databaseâ€¦")
    connection <- dbConnect(drv,
                 dbname = Sys.getenv("aws_dbname"),
                 host = Sys.getenv("aws_host"),
                 port = Sys.getenv("aws_port"),
                 user = Sys.getenv("aws_user"),
                 password = Sys.getenv("aws_password"),
                 timezone=NULL)
    print("Database Connected!")
    },
    error=function(cond) {
            print("Unable to connect to Database.")
    })

#search path
dbExecute(connection, "set search_path to survey_data")
```

### query data of interest

```{r}


q <- "select l.location, r.region, s.site, v.date, s2.detection_type, c.species_capture, 
      c.svl_mm, c.body_mass_g, c.life_stage, qbr.target_quant_per_swab, qbr.detected 
      from location l 
      join region r on l.location_id = r.location_id 
      join site s on r.region_id = s.region_id 
      join visit v on s.site_id = v.site_id 
      join survey s2 on v.visit_id = s2.visit_id 
      join capture c on s2.survey_id = c.survey_id 
      join qpcr_bd_results qbr on c.bd_swab_id = qbr.bd_swab_id
      where c.svl_mm is not null
      and c.body_mass_g is not null
      and c.life_stage = 'adult'
      and qbr.detected = '1';"

raw_data <- dbGetQuery(connection, q) 

```

### Find adequate species list based on sample size

```{r}
# 10 observations or more with SVL and target_quant_per_swab
infec_size <- raw_data %>% 
  group_by(species_capture) %>% 
  summarise(n = n()) %>% 
  filter(n > 10) %>% 
  filter(!species_capture %in% c("notophthalmus_viridescens")) #remove newt

species_list <- infec_size$species_capture



```

### Wrangle data

#### Initial wrangle

```{r}

mid_data <- raw_data %>% 
  filter(species_capture %in% species_list) %>% 
  mutate(target_quant_per_swab = log10(target_quant_per_swab + 1),
                  body_mass_g = abs(body_mass_g)) %>%  # error in db NEED TO FIX, one negative mass
  filter(body_mass_g > 0) %>%  # error in db NEED TO FIX, one bull frog with 0 mass) %>% 
  mutate(r = if_else(species_capture == "rana_muscosa" & svl_mm < 40, "0", "1")) %>% 
  filter(!r == "0") %>% 
  select(!r) %>% 
  group_by(species_capture) %>% 
  mutate(mean_L = median(svl_mm)) %>% 
  ungroup()


```

#### loop for bivariate plot - M size scalar 

```{r}

bi_va_plot <- list()

for (i in 1:length(species_list)) {
  
  bv_data <- mid_data %>% 
    filter(species_capture == species_list[i]) %>% 
    select(c(body_mass_g, svl_mm))
  
  bv_p <- ggplot(data = bv_data, aes(x=svl_mm, y=body_mass_g)) +
    geom_point() +
    ggtitle(label = paste(species_list[i])) 
  
  bi_va_plot[[i]] <- bv_p
  
  
}

bi_va_plot[1:length(bi_va_plot)]

# concerning points: colostethus_panamensis svl>50, desmognathus_fuscus svl>80, espadarana_prosoblepon svl<15, hyla_versicolor svl>60, lithobates_warszewitschii svl<10, pseudacris_crucifer svl >3.59, pseudacris_feriarum, rana_catesbeiana, rana_clamitans svl = 28.5, 22.20 & bm = 65.5, sachatamia_albomaculata svl > 30, silverstoneia_flotator svl>25, 

```

#### remove concerning poinnts for SMA regression

```{r}

sm_dat <- mid_data %>% 
  mutate(rm_dp = if_else(species_capture == "colostethus_panamensis" & svl_mm > 50.00,
                         1, 0),
         rm_dp = if_else(species_capture == "desmognathus_fuscus" & svl_mm > 80.00,
                         1, rm_dp),
         rm_dp = if_else(species_capture == "espadarana_prosoblepon" & svl_mm < 15.00,
                         1, rm_dp),
         rm_dp = if_else(species_capture == "hyla_versicolor" & svl_mm > 60.00,
                         1, rm_dp),
         rm_dp = if_else(species_capture == "lithobates_warszewitschii" & svl_mm < 10.00,
                         1, rm_dp),
         rm_dp = if_else(species_capture == "rana_clamitans" & svl_mm == 28.50 & body_mass_g == 65.50,
                         1, rm_dp),
         rm_dp = if_else(species_capture == "rana_clamitans" & svl_mm == 22.20 & body_mass_g == 65.50,
                         1, rm_dp),
         rm_dp = if_else(species_capture == "rana_clamitans" & svl_mm < 40.00 & body_mass_g > 25.00,
                         1, rm_dp),
         rm_dp = if_else(species_capture == "rana_clamitans" & svl_mm < 45.00,
                         1, rm_dp),
         rm_dp = if_else(species_capture == "sachatamia_albomaculata" & svl_mm > 30.00,
                         1, rm_dp),
         rm_dp = if_else(species_capture == "sachatamia_albomaculata" & svl_mm < 20.00,
                         1, rm_dp),
         rm_dp = if_else(species_capture == "silverstoneia_flotator" & svl_mm > 25.00,
                         1, rm_dp),
         rm_dp = if_else(species_capture == "silverstoneia_flotator" & svl_mm < 12.00 & body_mass_g > 0.50,
                         1, rm_dp),
         rm_dp = if_else(species_capture == "rana_catesbeiana" & svl_mm > 120.00 & body_mass_g == 100.00,
                         1, rm_dp),
         rm_dp = if_else(species_capture == "rana_catesbeiana" & svl_mm == 113.30 & body_mass_g == 14.30,
                         1, rm_dp),
         # rm_dp = if_else(species_capture == "rana_catesbeiana" & svl_mm < 42.00 & body_mass_g < 47.00,
         #                 1, rm_dp),
         rm_dp = if_else(species_capture == "rana_catesbeiana" & svl_mm < 50.00 & body_mass_g > 45.00,
                         1, rm_dp),
         rm_dp = if_else(species_capture == "rana_catesbeiana" & svl_mm == 104.00 & body_mass_g == 7.20,
                         1, rm_dp),
         rm_dp = if_else(species_capture == "pseudacris_crucifer" & svl_mm >35.59,
                         1, rm_dp)) %>% 
  filter(!rm_dp == 1) %>% 
  select(!rm_dp)




### Now check plots again

bi_va_plot <- list()

for (i in 1:length(species_list)) {
  
  bv_data <- sm_dat %>% 
    filter(species_capture == species_list[i]) %>% 
    select(c(body_mass_g, svl_mm))
  
  bv_p <- ggplot(data = bv_data, aes(x=svl_mm, y=body_mass_g)) +
    geom_point() +
    ggtitle(label = paste(species_list[i])) 
  
  bi_va_plot[[i]] <- bv_p
  
  
}

bi_va_plot[1:length(bi_va_plot)]

```

#### loop for slope calc per species `lm(log(mass)~(svl_mm))`

![](images/Screenshot%202023-12-04%20at%201.52.55%20PM.png)

```{r}

slopes_spec <- NULL

r_value <- NULL

for (i in 1:length(species_list)) {
  
  slop_data <- sm_dat %>% 
    filter(species_capture == species_list[i]) %>% 
    mutate(body_mass_g = log(body_mass_g),
           svl_mm = log(svl_mm))
  
  model <- lm(body_mass_g ~ svl_mm, data=slop_data)
  
  slope <- model$coefficients[2]
  
  slopes_spec <- rbind(slopes_spec, slope)
  
  r <- sqrt(summary(model)$r.squared)
  
  r_value <- rbind(r_value, r)

}

species_list_df <- as.data.frame(species_list)

final_slopes_r <- cbind(slopes_spec, r_value, species_list_df) %>% 
  rename(b_sma = svl_mm) %>% 
  #mutate(b_sma = slope)) %>% 
  select(species_list, b_sma)

```

#### add `b_sma` to data and calculate size scalar index

```{r}

data <- mid_data %>% 
  ungroup() %>% 
  left_join(final_slopes_r, by = c("species_capture" = "species_list")) %>% 
  mutate(M = (body_mass_g * ((mean_L / svl_mm) ^ b_sma))) %>% 
  filter(!M > 250)

species_list <- species_list[-10]# remove due to poor b_sma value

```

### lm() Species Loop `lm(target_quant_per_swab ~ M + svl_mm * body_mass_g)`

```{r}

plots <- list()

p_value_M <- NULL
mod_slope_M <- NULL
p_value_svl <- NULL
mod_slope_svl <- NULL
p_value_bm <- NULL
mod_slope_bm <- NULL
p_value_int <- NULL
mod_slope_int <- NULL
r_value <- NULL

for (i in 1:length(species_list)) {
  
  
  # data for each model
  dat <- data %>% 
    select(species_capture, target_quant_per_swab, M, svl_mm, body_mass_g) %>% 
    filter(species_capture == species_list[21]) %>% 
    mutate(M = as.numeric(scale(M)),
           svl_mm = as.numeric(scale(svl_mm)),
           body_mass_g = as.numeric(scale(body_mass_g)))
  
  # run lm target_quant_per_swab ~ M + svl_mm*body_mass_g per species
  mod <- lm(target_quant_per_swab ~ M + svl_mm * body_mass_g, data=dat)
  

  # pull model coefficients for each predictor
  p_value_M <- rbind(p_value_M, summary(mod)$coefficients[2,4])
  mod_slope_M <- rbind(mod_slope_M, summary(mod)$coefficients[2,1])
  p_value_svl <- rbind(p_value_svl, summary(mod)$coefficients[3,4])
  mod_slope_svl <- rbind(mod_slope_svl, summary(mod)$coefficients[3,1])
  p_value_bm <- rbind(p_value_bm, summary(mod)$coefficients[4,4])
  mod_slope_bm <- rbind(mod_slope_bm, summary(mod)$coefficients[4,1])
  p_value_int <- rbind(p_value_int, summary(mod)$coefficients[5,4])
  mod_slope_int <- rbind(mod_slope_int, summary(mod)$coefficients[5,1])
  r_value <- rbind(r_value, summary(mod)$r.squared)
  
  # predict
  #M = seq(min(dat$M), max(dat$M), len=50)
  M = rep(mean(dat$M), len=50) # Mean
  svl_mm = seq(min(dat$svl_mm), max(dat$svl_mm), len=50)
  #svl_mm = rep(mean(dat$svl_mm), len=50) # Mean
  body_mass_g = seq(min(dat$body_mass_g), max(dat$body_mass_g), len=50)
  #body_mass_g = rep(mean(dat$body_mass_g), len=50) # Mean
  
  newdata <- data.frame(M = M, svl_mm = svl_mm, body_mass_g = body_mass_g) %>% 
    mutate(size = "",
           size = case_when(body_mass_g < body_mass_g*0.33 ~ "small",
                            body_mass_g > body_mass_g*0.33 & body_mass_g < body_mass_g*0.66 ~ "medium",
                            body_mass_g > body_mass_g*0.66 ~ "large"))
  
  mod_pred = predict(mod, newdata = newdata, se.fit = T, type = 'response')
  newdata$pred <- mod_pred$fit
  newdata$upper_se <- mod_pred$fit + (2 * mod_pred$se.fit)
  newdata$lower_se <- mod_pred$fit - (2 * mod_pred$se.fit)
  
  
  # make GAM plot
  p <- ggplot(newdata) + 
   geom_line(aes(x=svl_mm, y=pred)) +
   geom_point(data=dat, aes(x=svl_mm, y=target_quant_per_swab), size=2, alpha = 0.2) +
   geom_ribbon(aes(ymin = lower_se, ymax= upper_se, x = svl_mm), alpha = 0.2, fill = "blue")+
   xlab("svl_mm") + ylab("Infection Intensity") + theme_classic() +
   coord_cartesian(ylim = c(0,max(newdata$upper_se) + 3)) + 
   ggtitle(paste(species_list[i], ", slope:", summary(mod)$coefficients[2,1], 
                 "p-value:", summary(mod)$coefficients[2,4]))
    
 # save GAM plot in list
  plots[[i]] <- p  
  
  
  # # residuals vs fitted
  # par(mfrow = c(2,2))
  # plot(mod, main = species_list[i])
  # 
  # # cooks distance
  # par(mfrow = c(1,1))
  # cooksd <- cooks.distance(mod)
  # plot(cooksd, pch="*", cex=2, main=paste("Cooks Distance", species_list[i])) 
  # abline(h = 4*mean(cooksd, na.rm=T), col="red")  # add cutoff line
  # text(x=1:length(cooksd)+1, y=cooksd, labels=ifelse(cooksd>4*mean(cooksd, na.rm=T),names(cooksd),""), col="red") 
  # 
  # Error checking during loop
  print(paste("done with", species_list[i]))
  
}



```

### Examine Significant Table

```{r}

sig_table <- cbind(species_list, mod_slope_M, p_value_M, mod_slope_svl, p_value_svl,
                   mod_slope_bm, p_value_bm, mod_slope_int, p_value_int) %>% 
  as.data.frame() %>% 
  rename(mod_slope_M = V2,
         p_value_M = V3,
         mod_slope_svl = V4,
         p_value_svl = V5,
         mod_slope_bm = V6,
         p_value_bm = V7,
         mod_slope_int = V8,
         p_value_int = V9) %>% 
  mutate(across(mod_slope_M:p_value_int, ~ round(as.numeric(.), 4)))

```

### Examine Model Outputs

```{r}
species_list

summary(species_list[21])
```

### Examine Model Plots

```{r}

plots[1:length(plots)]




```

### Save plots

```{r}
for (i in 1:length(plots)) {
  
  ggsave(here("figures", paste(species_list[i], ".jpeg", sep="")),
         plot = plots[[i]])
  
}



```
