---
title: "Variation in Bd Intensity Through Size of Adult Amphibians"
format: html
editor: source
---

Guiding Question: How does Bd intensity change with size of adult amphibians across RIBBiTR survey locations?

-   Include toads?

-   Need to determine appropriate species per location with significant swab results. How many data points needed?


## load packages

```{r}

if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

librarian::shelf(tidyverse, here, DBI, RPostgres)

```

## connect to database

```{r}
tryCatch({
    drv <- dbDriver("Postgres")
    print("Connecting to Databaseâ€¦")
    connection <- dbConnect(drv,
                 dbname = Sys.getenv("aws_dbname"),
                 host = Sys.getenv("aws_host"),
                 port = Sys.getenv("aws_port"),
                 user = Sys.getenv("aws_user"),
                 password = Sys.getenv("aws_password"),
                 timezone=NULL)
    print("Database Connected!")
    },
    error=function(cond) {
            print("Unable to connect to Database.")
    })

#search path
dbExecute(connection, "set search_path to survey_data")
```

## query data of interest

```{r}



q <- "select l.location, r.region, s.site, v.date, s2.detection_type, c.species_capture, 
      c.svl_mm, c.body_mass_g, c.life_stage, qbr.average_copy_number, qbr.detected 
      from location l 
      join region r on l.location_id = r.location_id 
      join site s on r.region_id = s.region_id 
      join visit v on s.site_id = v.site_id 
      join survey s2 on v.visit_id = s2.visit_id 
      join capture c on s2.survey_id = c.survey_id 
      join qpcr_bd_results qbr on c.bd_swab_id = qbr.bd_swab_id
      where c.svl_mm is not null
      and c.life_stage = 'adult'
      and qbr.detected = '1'";

raw_data <- dbGetQuery(connection, q) 

```

## Find good species list
```{r}
# 10 observations or more with SVL and average_copy_number
infec_size <- raw_data %>% 
  group_by(species_capture) %>% 
  summarise(n = n()) %>% 
  filter(n > 10) %>% 
  filter(!species_capture %in% c("notophthalmus_viridescens")) #remove newt

species_list <- infec_size$species_capture



```


## Wrangle data

### Initial wrangle
```{r}

mid_data <- raw_data %>% 
  filter(species_capture %in% species_list) %>% 
  mutate(average_copy_number = log10(average_copy_number + 1),
                  body_mass_g = abs(body_mass_g)) %>%  # error in db NEED TO FIX, one negative mass
  filter(body_mass_g > 0) %>%  # error in db NEED TO FIX, one bull frog with 0 mass) %>% 
  mutate(r = if_else(species_capture == "rana_muscosa" & svl_mm < 40, "0", "1")) %>% 
  filter(!r == "0") %>% 
  select(!r) %>% 
  group_by(species_capture) %>% 
  mutate(mean_L = mean(svl_mm))
```

### loop for slope calc per species `lm(mass~l)`
```{r}

slopes_spec <- NULL

r_value <- NULL

for (i in 1:length(species_list)) {
  
  slop_data <- mid_data %>% 
    filter(species_capture == species_list[i])
  
  model <- lm(log(body_mass_g) ~ log(svl_mm), data=slop_data)
  
  slope <- model$coefficients[2]
  
  slopes_spec <- rbind(slopes_spec, slope)
  
  r <- sqrt(summary(model)$r.squared)
  
  r_value <- rbind(r_value, r)

}

species_list_df <- as.data.frame(species_list)

final_slopes_r <- cbind(slopes_spec, r_value, species_list_df) %>% 
  rename(slope = 'log(svl_mm)') %>% 
  mutate(b_sma = slope/r_value) %>% 
  select(species_list, b_sma)

```

### add `b_sma` to data and calculate size scale index
```{r}

data <- mid_data %>% 
  ungroup() %>% 
  left_join(final_slopes_r, by = c("species_capture" = "species_list")) %>% 
  mutate(M = body_mass_g * (mean_L / svl_mm) ^ b_sma)

```


## lm() Species Loop
```{r}

plots <- list()

for (i in 1:length(species_list)) {
  
  
  # data for each model
  dat <- data %>% 
    select(species_capture, average_copy_number, M) %>% 
    filter(species_capture == species_list[i]) 
  
  # run lm average_copy_number ~ M per species
  mod <- lm(average_copy_number ~ M, data=dat)
  
  # create model outputs as objects in environment
  #assign(species_list[i], mod)
  
  # predict
  M = seq(min(dat$M), max(dat$M), len=50)
  #average_copy_number = seq(min(dat$average_copy_number), max(dat$average_copy_number), len = 50)
  newdata <- data.frame(M = M)
  mod_pred = predict(mod, newdata = newdata, se.fit = T)
  newdata$pred <- mod_pred$fit
  newdata$upper_se <- mod_pred$fit + (2 * mod_pred$se.fit)
  newdata$lower_se <- mod_pred$fit - (2 * mod_pred$se.fit)
  
  
  # make GAM plot
  p <- ggplot(newdata) + 
   geom_line(aes(x=M, y=pred)) +
   geom_point(data=dat, aes(x=M, y=average_copy_number), size=2, alpha = 0.2) +
   geom_ribbon(aes(ymin = lower_se, ymax= upper_se, x = M), alpha = 0.2, fill = "blue")+
   xlab("Scaled Mass Index") + ylab("Infection Intensity") + theme_classic() +
   coord_cartesian(ylim = c(0,max(newdata$upper_se) + 3)) + ggtitle(paste(species_list[i], ", slope:", summary(mod)$coefficients[2,1]))
    
 # save GAM plot in list
  plots[[i]] <- p  
  
  
  # residuals vs fitted
  par(mfrow = c(2,2))
  plot(mod, main = species_list[i])
  
  # cooks distance
  par(mfrow = c(1,1))
  cooksd <- cooks.distance(mod)
  plot(cooksd, pch="*", cex=2, main=paste("Cooks Distance", species_list[i])) 
  abline(h = 4*mean(cooksd, na.rm=T), col="red")  # add cutoff line
  text(x=1:length(cooksd)+1, y=cooksd, labels=ifelse(cooksd>4*mean(cooksd, na.rm=T),names(cooksd),""), col="red") 
  
  # Error checking during loop
  print(paste("done with", species_list[i]))
  
}


```

## Examine Model Plots
```{r}

plots[1:length(plots)]

```

## Save plots

```{r}
for (i in 1:length(plots)) {
  
  ggsave(here("figures", paste(species_list[i], ".jpeg", sep="")),
         plot = plots[[i]])
  
}



```

